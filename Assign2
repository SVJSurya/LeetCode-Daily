"""
NumPy Array Operations and Analysis
This script demonstrates various NumPy operations including:
- Array creation and manipulation
- Mathematical and statistical operations
- Linear algebra
- Data simulation and timing comparisons
"""

import numpy as np
import time
from timeit import default_timer as timer

# Part 1: Array Creation
print("Part 1: Array Creation")
print("-" * 50)

# 1D array from 1 to 20
arr_1d = np.arange(1, 21)
print("1D Array:")
print(arr_1d)
print(f"Shape: {arr_1d.shape}, Size: {arr_1d.size}, dtype: {arr_1d.dtype}\n")

# 2D random array
arr_2d = np.random.randint(10, 51, size=(3, 4))
print("2D Random Array:")
print(arr_2d)
print(f"Shape: {arr_2d.shape}, Size: {arr_2d.size}, dtype: {arr_2d.dtype}\n")

# 3x3 identity matrix
identity_matrix = np.eye(3)
print("3x3 Identity Matrix:")
print(identity_matrix)
print(f"Shape: {identity_matrix.shape}, Size: {identity_matrix.size}, dtype: {identity_matrix.dtype}\n")

# Part 2: Array Indexing and Slicing
print("\nPart 2: Array Indexing and Slicing")
print("-" * 50)

print("Second row of 2D array:")
print(arr_2d[1])

print("\nFirst two columns of 2D array:")
print(arr_2d[:, :2])

print("\nLast element of 1D array:")
print(arr_1d[-1])

# Part 3: Mathematical Operations
print("\nPart 3: Mathematical Operations")
print("-" * 50)

# Element-wise operations
arr1 = np.array([1, 2, 3, 4, 5])
arr2 = np.array([5, 4, 3, 2, 1])

print("Array 1:", arr1)
print("Array 2:", arr2)
print("\nAddition:", arr1 + arr2)
print("Multiplication:", arr1 * arr2)
print("Square of arr1:", np.square(arr1))

# Statistical Operations
random_5x5 = np.random.rand(5, 5)
print("\n5x5 Random Array:")
print(random_5x5)

print(f"\nMean: {np.mean(random_5x5):.4f}")
print(f"Median: {np.median(random_5x5):.4f}")
print(f"Standard Deviation: {np.std(random_5x5):.4f}")

max_val = np.max(random_5x5)
min_val = np.min(random_5x5)
max_idx = np.unravel_index(np.argmax(random_5x5), random_5x5.shape)
min_idx = np.unravel_index(np.argmin(random_5x5), random_5x5.shape)

print(f"\nMaximum value: {max_val:.4f} at index {max_idx}")
print(f"Minimum value: {min_val:.4f} at index {min_idx}")

# Reshaping and Transposing
print("\nReshaping and Transposing")
print("-" * 50)

arr_16 = np.arange(1, 17)
matrix_4x4 = arr_16.reshape(4, 4)
print("Original 4x4 Matrix:")
print(matrix_4x4)
print("\nTransposed Matrix:")
print(matrix_4x4.T)

# Broadcasting
print("\nBroadcasting Example")
print("-" * 50)

ones_3x3 = np.ones((3, 3))
broadcast_arr = np.array([1, 2, 3])
result = ones_3x3 * broadcast_arr
print("Broadcasting Result:")
print(result)

# Linear Algebra
print("\nPart 4: Linear Algebra")
print("-" * 50)

A = np.array([[1, 2], [3, 4]])
B = np.array([[2, 0], [1, 3]])

print("Matrix A:")
print(A)
print("\nMatrix B:")
print(B)

print("\nMatrix Multiplication (A @ B):")
print(np.matmul(A, B))

det_A = np.linalg.det(A)
print(f"\nDeterminant of A: {det_A:.4f}")

if det_A != 0:
    inv_A = np.linalg.inv(A)
    print("\nInverse of A:")
    print(inv_A)
else:
    print("\nMatrix A is not invertible")

# Data Simulation
print("\nPart 5: Data Simulation")
print("-" * 50)

exam_scores = np.random.uniform(50, 100, 100)
print(f"Average Score: {np.mean(exam_scores):.2f}")
print(f"Percentage above 75: {np.mean(exam_scores > 75) * 100:.2f}%")

# File Handling
print("\nPart 6: File Handling")
print("-" * 50)

# Save scores to file
np.save('scores.npy', exam_scores)
loaded_scores = np.load('scores.npy')
print("Verification - First 5 scores from loaded data:")
print(loaded_scores[:5])

# Vectorization Comparison
print("\nPart 7: Vectorization Comparison")
print("-" * 50)

def python_squares():
    return [i ** 2 for i in range(1, 10001)]

def numpy_squares():
    return np.square(np.arange(1, 10001))

# Time comparison
start = timer()
python_result = python_squares()
python_time = timer() - start

start = timer()
numpy_result = numpy_squares()
numpy_time = timer() - start

print(f"Python list comprehension time: {python_time:.6f} seconds")
print(f"NumPy vectorization time: {numpy_time:.6f} seconds")
print(f"NumPy is {python_time/numpy_time:.2f}x faster")
