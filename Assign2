"""
World Happiness Report Analysis (2016)

This script performs data loading, cleaning, exploration, visualization,
and saves the processed dataset. It expects a file named '2016.csv' in
the same directory.

Author: Generated by assistant
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


def load_data(filepath='2016.csv'):
	"""Load dataset and display initial information."""
	try:
		df = pd.read_csv(filepath)
		print(f"Loaded '{filepath}' with shape {df.shape}")
		print("\nFirst 10 rows:")
		print(df.head(10))
		print("\nMissing values per column:")
		print(df.isnull().sum())
		print("\nInfo:")
		df.info()
		print("\nDescribe:")
		print(df.describe(include='all'))
		return df
	except FileNotFoundError:
		print(f"Error: File '{filepath}' not found")
		return None
	except Exception as e:
		print(f"Error loading data: {e}")
		return None


def handle_missing(df):
	"""Handle missing values: fill selected columns with mean and drop missing country rows."""
	if df is None:
		return None

	# Standardize column names (common variations)
	df = df.rename(columns={col: col.strip() for col in df.columns})

	cols_to_fill = ['GDP per Capita', 'Social support', 'Healthy life expectancy', 'Freedom to make life choices']
	for c in cols_to_fill:
		# Accept different naming conventions
		matches = [col for col in df.columns if col.lower().replace('_', ' ').strip() == c.lower().replace('_', ' ').strip()]
		if matches:
			col_name = matches[0]
			mean_val = pd.to_numeric(df[col_name], errors='coerce').mean()
			df[col_name] = pd.to_numeric(df[col_name], errors='coerce').fillna(mean_val)

	# Drop rows with missing Country (attempt multiple possible column names)
	country_cols = [c for c in ['Country', 'Country or region', 'country'] if c in df.columns]
	if country_cols:
		df = df.dropna(subset=[country_cols[0]]).reset_index(drop=True)

	print("\nMissing after handling:")
	print(df.isnull().sum())
	return df


def feature_engineering(df):
	"""Create Happiness_Difference and scaled GDP column."""
	if df is None:
		return None

	# Identify likely column names
	score_col = next((c for c in df.columns if 'score' in c.lower()), None)
	region_col = next((c for c in df.columns if 'region' in c.lower()), None)
	gdp_col = next((c for c in df.columns if 'gdp' in c.lower()), None)

	if score_col and region_col:
		regional_avg = df.groupby(region_col)[score_col].transform('mean')
		df['Happiness_Difference'] = df[score_col] - regional_avg

	if gdp_col:
		df['GDP_Per_Capita'] = pd.to_numeric(df[gdp_col], errors='coerce') / 1000.0

	return df


def outlier_detection(df):
	"""Plot boxplots to inspect outliers for selected numeric columns."""
	candidates = [c for c in df.columns if any(x in c.lower() for x in ['gdp', 'social', 'life expectancy', 'healthy'])]
	numeric = [c for c in candidates if pd.api.types.is_numeric_dtype(df[c])]
	if not numeric:
		print("No numeric columns found for outlier detection")
		return

	plt.figure(figsize=(12, 6))
	df[numeric].boxplot()
	plt.title('Boxplots for selected columns')
	plt.xticks(rotation=45)
	plt.tight_layout()
	plt.show()


def exploration(df):
	"""Perform basic exploration: unique values, histograms, counts by region."""
	if df is None:
		return

	region_col = next((c for c in df.columns if 'region' in c.lower()), None)
	country_col = next((c for c in df.columns if 'country' in c.lower()), None)

	if region_col:
		print("\nUnique Regions:")
		print(df[region_col].unique())
		print("\nCountries per Region:")
		print(df.groupby(region_col)[country_col].nunique())

	# Histograms for numeric columns (limit to common numeric columns)
	numeric = df.select_dtypes(include=[np.number]).columns.tolist()
	print("\nNumeric columns:", numeric)
	if numeric:
		df[numeric].hist(figsize=(12, 10))
		plt.tight_layout()
		plt.show()


def region_stats_and_plots(df):
	score_col = next((c for c in df.columns if 'score' in c.lower()), None)
	region_col = next((c for c in df.columns if 'region' in c.lower()), None)
	if not score_col or not region_col:
		print("Required columns for region stats not found")
		return

	region_avg = df.groupby(region_col)[score_col].mean().sort_values(ascending=False)
	print("\nAverage Happiness Score by Region:")
	print(region_avg)

	plt.figure(figsize=(10, 6))
	region_avg.plot(kind='bar')
	plt.ylabel('Average Happiness Score')
	plt.title('Average Happiness Score by Region')
	plt.xticks(rotation=45)
	plt.tight_layout()
	plt.show()


def correlation_analysis(df):
	numeric = df.select_dtypes(include=[np.number])
	if numeric.shape[1] < 2:
		print("Not enough numeric columns for correlation analysis")
		return
	corr = numeric.corr()
	print("\nCorrelation matrix:")
	print(corr)
	plt.figure(figsize=(10, 8))
	sns.heatmap(corr, annot=True, fmt='.2f', cmap='coolwarm')
	plt.title('Correlation Matrix')
	plt.show()


def top_bottom_countries(df):
	score_col = next((c for c in df.columns if 'score' in c.lower()), None)
	country_col = next((c for c in df.columns if 'country' in c.lower()), None)
	if not score_col or not country_col:
		return
	print("\nTop 10 countries by Score:")
	print(df.nlargest(10, score_col)[[country_col, score_col]])
	print("\nBottom 10 countries by Score:")
	print(df.nsmallest(10, score_col)[[country_col, score_col]])


def regional_trends(df):
	# Attempt to find a time column
	time_col = next((c for c in df.columns if 'year' in c.lower() or 'date' in c.lower()), None)
	region_col = next((c for c in df.columns if 'region' in c.lower()), None)
	score_col = next((c for c in df.columns if 'score' in c.lower()), None)
	if not time_col or not region_col or not score_col:
		print("No time-based trend data available")
		return

	df_time = df.groupby([time_col, region_col], as_index=False)[score_col].mean()
	pivot = df_time.pivot(index=time_col, columns=region_col, values=score_col)
	pivot.plot(figsize=(12, 6))
	plt.title('Regional Happiness Trends Over Time')
	plt.ylabel('Average Score')
	plt.show()


def life_expectancy_bins(df):
	le_col = next((c for c in df.columns if 'life' in c.lower()), None)
	score_col = next((c for c in df.columns if 'score' in c.lower()), None)
	if not le_col or not score_col:
		print("Life expectancy or score column not found")
		return
	bins = [0, 60, 70, 80, np.inf]
	labels = ['<60', '60-70', '70-80', '>80']
	df['LifeExpRange'] = pd.cut(df[le_col], bins=bins, labels=labels)
	result = df.groupby('LifeExpRange')[score_col].mean()
	print("\nAverage Happiness Score by Life Expectancy Range:")
	print(result)


def gdp_bins_analysis(df):
	gdp_col = next((c for c in df.columns if 'gdp' in c.lower()), None)
	score_col = next((c for c in df.columns if 'score' in c.lower()), None)
	if not gdp_col or not score_col:
		print("GDP or Score column not found")
		return
	bins = [-np.inf, 0.5, 1.0, 2.0, np.inf]
	labels = ['<0.5', '0.5-1.0', '1.0-2.0', '>2.0']
	df['GDPRange'] = pd.cut(df[gdp_col], bins=bins, labels=labels)
	result = df.groupby('GDPRange')[score_col].mean()
	print("\nAverage Happiness Score by GDP Range:")
	print(result)


def per_region_top2(df):
	region_col = next((c for c in df.columns if 'region' in c.lower()), None)
	score_col = next((c for c in df.columns if 'score' in c.lower()), None)
	country_col = next((c for c in df.columns if 'country' in c.lower()), None)
	if not region_col or not score_col or not country_col:
		return
	top2 = df.sort_values(score_col, ascending=False).groupby(region_col).head(2)
	print("\nTop 2 happiest countries per region:")
	print(top2[[region_col, country_col, score_col]])
	plt.figure(figsize=(12, 8))
	sns.barplot(data=top2, x=score_col, y=country_col, hue=region_col)
	plt.title('Top 2 happiest countries per region')
	plt.tight_layout()
	plt.show()


def boxplot_by_region(df):
	region_col = next((c for c in df.columns if 'region' in c.lower()), None)
	score_col = next((c for c in df.columns if 'score' in c.lower()), None)
	if not region_col or not score_col:
		return
	plt.figure(figsize=(14, 8))
	sns.boxplot(x=region_col, y=score_col, data=df)
	plt.xticks(rotation=45)
	plt.title('Happiness Score Distribution by Region')
	plt.tight_layout()
	plt.show()


def region_rank_and_contributions(df):
	region_col = next((c for c in df.columns if 'region' in c.lower()), None)
	score_col = next((c for c in df.columns if 'score' in c.lower()), None)
	country_col = next((c for c in df.columns if 'country' in c.lower()), None)
	if not region_col or not score_col or not country_col:
		return

	df['RegionRank'] = df.groupby(region_col)[score_col].rank(ascending=False)
	top_per_region = df.loc[df.groupby(region_col)['RegionRank'].idxmin()]
	print("\nTop country per region by rank:")
	print(top_per_region[[region_col, country_col, score_col, 'RegionRank']])

	# Percentage contribution of components to Score
	components = [c for c in df.columns if any(k in c.lower() for k in ['gdp', 'social', 'life', 'freedom'])]
	pct_cols = []
	for comp in components:
		try:
			df[f'{comp}_pct'] = (pd.to_numeric(df[comp], errors='coerce') / df[score_col]) * 100
			pct_cols.append(f'{comp}_pct')
		except Exception:
			continue

	if pct_cols:
		df['TotalComponentPct'] = df[pct_cols].sum(axis=1)
		print("\nTop 10 countries by total component percentage:")
		country_col = country_col or 'Country'
		print(df[[country_col, score_col, 'TotalComponentPct']].nlargest(10, 'TotalComponentPct'))


def save_and_verify(df, filename='Processed_Happiness_Data.csv'):
	if df is None:
		return
	df.to_csv(filename, index=False)
	print(f"\nSaved processed data to {filename}")
	df_loaded = pd.read_csv(filename)
	print("\nFirst 5 rows of saved file:")
	print(df_loaded.head())


def main():
	df = load_data('2016.csv')
	if df is None:
		return
	df = handle_missing(df)
	df = feature_engineering(df)
	outlier_detection(df)
	exploration(df)
	region_stats_and_plots(df)
	correlation_analysis(df)
	top_bottom_countries(df)
	regional_trends(df)
	life_expectancy_bins(df)
	gdp_bins_analysis(df)
	per_region_top2(df)
	boxplot_by_region(df)
	region_rank_and_contributions(df)
	save_and_verify(df)


if __name__ == '__main__':
	main()
