"""
World Happiness Report Analysis
This script performs data analysis on the World Happiness Report dataset using pandas.
It includes data loading, cleaning, analysis, and visualization.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def load_and_explore_data(filepath='world_happiness_report.csv'):
    """Load and perform initial data exploration."""
    try:
        # Load the dataset
        df = pd.read_csv(filepath)
        print("Dataset loaded successfully!")
        print("\nFirst 10 rows of the dataset:")
        print(df.head(10))
        
        # Check missing values
        print("\nMissing values in each column:")
        print(df.isnull().sum())
        
        # Display dataset info
        print("\nDataset Information:")
        print(df.info())
        
        # Display summary statistics
        print("\nSummary Statistics:")
        print(df.describe())
        
        return df
        
    except FileNotFoundError:
        print(f"Error: {filepath} not found in the current directory.")
        return None
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        return None

def clean_and_preprocess(df):
    """Clean the dataset and create new features."""
    if df is None:
        return None
    
    # Fill missing values with column means
    columns_to_fill = ['GDP per capita', 'Social support', 
                       'Healthy life expectancy', 'Freedom to make life choices']
    
    for column in columns_to_fill:
        if column in df.columns:
            df[column] = df[column].fillna(df[column].mean())
    
    # Drop rows with missing Country
    if 'Country' in df.columns:
        df = df.dropna(subset=['Country'])
    
    print("Missing values after cleaning:")
    print(df.isnull().sum())
    
    # Feature Engineering
    if 'Score' in df.columns:
        df['Happiness_Index'] = (df['Score'] - df['Score'].min()) / \
                               (df['Score'].max() - df['Score'].min())
    
    if 'GDP per capita' in df.columns:
        df['GDP_per_Capita_Category'] = pd.cut(
            df['GDP per capita'],
            bins=[-np.inf, 0.5, 1.0, np.inf],
            labels=['Low', 'Medium', 'High']
        )
    
    return df

def analyze_happiness_scores(df):
    """Analyze happiness scores and GDP relationship."""
    if df is None:
        return
    
    if 'Score' in df.columns and 'Country' in df.columns:
        print("\nTop 10 Happiest Countries:")
        print(df.nlargest(10, 'Score')[['Country', 'Score', 'GDP per capita']])
        
        print("\nBottom 10 Countries by Happiness Score:")
        print(df.nsmallest(10, 'Score')[['Country', 'Score', 'GDP per capita']])
    
    # Create scatter plot
    if 'GDP per capita' in df.columns and 'Score' in df.columns:
        plt.figure(figsize=(10, 6))
        plt.scatter(df['GDP per capita'], df['Score'], alpha=0.5)
        plt.xlabel('GDP per capita')
        plt.ylabel('Happiness Score')
        plt.title('GDP per capita vs. Happiness Score')
        
        # Calculate and display correlation
        correlation = df['GDP per capita'].corr(df['Score'])
        plt.text(0.05, 0.95, f'Correlation: {correlation:.2f}', 
                transform=plt.gca().transAxes)
        plt.show()

def perform_advanced_operations(df):
    """Perform advanced pandas operations like sorting and ranking."""
    if df is None:
        return
    
    if 'Score' in df.columns:
        print("\nTop 10 Countries by Score (sorted):")
        print(df.sort_values('Score', ascending=False)
              .head(10)[['Country', 'Score']])

        # Create rank column
        df['Rank'] = df['Score'].rank(ascending=False)
        
        print("\nFirst 10 countries with their ranks:")
        print(df[['Country', 'Score', 'Rank']].head(10))
    
    return df

def save_and_verify(df, output_file='Cleaned_Happiness_Report.csv'):
    """Save the processed dataset and verify the output."""
    if df is None:
        return
    
    # Save the cleaned dataset
    df.to_csv(output_file, index=False)
    print(f"\nDataset saved to {output_file}")

    # Verify the saved file
    print("\nVerifying saved file:")
    df_verified = pd.read_csv(output_file)
    print("\nFirst 5 rows of the saved file:")
    print(df_verified.head())

    # Compare shapes
    print("\nShape comparison:")
    print(f"Original shape: {df.shape}")
    print(f"Saved file shape: {df_verified.shape}")

    # Verify columns
    print("\nAll columns preserved:", 
          set(df.columns) == set(df_verified.columns))

def main():
    # Set display options
    pd.set_option('display.max_columns', None)
    pd.set_option('display.float_format', lambda x: '%.3f' % x)
    
    # Load and explore data
    df = load_and_explore_data()
    
    # Clean and preprocess
    df = clean_and_preprocess(df)
    
    # Analyze happiness scores
    analyze_happiness_scores(df)
    
    # Perform advanced operations
    df = perform_advanced_operations(df)
    
    # Save and verify
    save_and_verify(df)

if __name__ == "__main__":
    main()
