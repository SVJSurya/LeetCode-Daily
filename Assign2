"""
COVID-19 Data Processing Script

This script implements the requested tasks:
- File existence check and loading
- Duplicate removal
- Adding active cases
- Filtering, severity column via lambda
- Grouping/aggregation and visualizations
- Exception handling for numeric conversion
- Advanced data structures (dicts, tuples, list comprehensions)
- Saving and validating the processed CSV

Requirements: pandas, matplotlib, seaborn, numpy
"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


# ---------------------------
# Part 1: File Handling and Validation
# ---------------------------

DATA_FILE = 'covid_19_clean_complete.csv'

def load_and_validate(file_path: str) -> pd.DataFrame:
    """Check file existence, load with pandas, and remove duplicate rows.

    Raises FileNotFoundError if the file is missing.
    Returns the cleaned DataFrame.
    """
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"File not found: {file_path}")

    df = pd.read_csv(file_path)
    print(f"Loaded '{file_path}' with {len(df)} rows and {len(df.columns)} columns.")

    # Basic validation: remove duplicate rows
    dup_count = df.duplicated().sum()
    if dup_count > 0:
        df = df.drop_duplicates().reset_index(drop=True)
        print(f"Removed {dup_count} duplicate rows.")
    else:
        print("No duplicate rows found.")

    print("First five rows:")
    print(df.head())
    return df


# ---------------------------
# Part 2: Advanced Functions and Data Manipulation
# ---------------------------

def add_active_cases(df: pd.DataFrame) -> pd.DataFrame:
    """Add an 'Active' column: confirmed - (deaths + recovered)."""
    # Ensure numeric columns are present
    for col in ['Confirmed', 'Deaths', 'Recovered']:
        if col not in df.columns:
            raise KeyError(f"Expected column '{col}' not found in dataframe")

    # coerce to numeric where possible (errors='coerce' will set invalid parsing to NaN)
    df['Confirmed'] = pd.to_numeric(df['Confirmed'], errors='coerce')
    df['Deaths'] = pd.to_numeric(df['Deaths'], errors='coerce')
    df['Recovered'] = pd.to_numeric(df['Recovered'], errors='coerce')

    df['Active'] = df['Confirmed'] - (df['Deaths'].fillna(0) + df['Recovered'].fillna(0))
    return df


def countries_over_threshold(df: pd.DataFrame, threshold: int = 1_000_000) -> list:
    """Return list of countries with total confirmed cases above threshold using filter()."""
    # Aggregate confirmed by country
    agg = df.groupby('Country/Region', as_index=False)['Confirmed'].sum()

    # filter returns an iterator; convert to list
    filtered_iter = filter(lambda row: row['Confirmed'] > threshold, agg.to_dict('records'))
    countries = [r['Country/Region'] for r in filtered_iter]
    return countries


def add_severity_column(df: pd.DataFrame) -> pd.DataFrame:
    """Add 'severity' column using a lambda function according to confirmed case counts."""
    df['severity'] = df['Confirmed'].apply(
        lambda x: 'High' if x > 1_000_000 else ('Moderate' if 100_000 <= x <= 1_000_000 else 'Low')
    )
    return df


# ---------------------------
# Part 3: Data Aggregation and Visualization
# ---------------------------

def aggregate_by_country(df: pd.DataFrame) -> pd.DataFrame:
    agg = df.groupby('Country/Region', as_index=False).agg(
        {'Confirmed': 'sum', 'Deaths': 'sum', 'Recovered': 'sum'}
    )
    agg = agg.sort_values(by='Confirmed', ascending=False).reset_index(drop=True)
    print("\nTop 5 countries by total confirmed cases:")
    print(agg.head(5))
    return agg


def plot_top_countries(agg_df: pd.DataFrame, top_n: int = 10):
    top = agg_df.head(top_n)
    plt.figure(figsize=(12, 6))
    sns.barplot(data=top, x='Confirmed', y='Country/Region', palette='Reds_r')
    plt.title(f'Top {top_n} Countries by Total Confirmed Cases')
    plt.xlabel('Total Confirmed')
    plt.tight_layout()
    plt.show()


def plot_trends_for_country(df: pd.DataFrame, country: str = 'India'):
    df_country = df[df['Country/Region'] == country].copy()
    if df_country.empty:
        print(f"No data found for country: {country}")
        return
    # Ensure 'Date' column is datetime
    if 'Date' in df_country.columns:
        df_country['Date'] = pd.to_datetime(df_country['Date'], errors='coerce')
        grouped = df_country.groupby('Date', as_index=True)[['Confirmed', 'Recovered', 'Deaths']].sum()
        grouped = grouped.sort_index()

        plt.figure(figsize=(12, 6))
        grouped.plot(kind='line')
        plt.title(f'Trend of Confirmed/Recovered/Deaths over time - {country}')
        plt.ylabel('Count')
        plt.xlabel('Date')
        plt.tight_layout()
        plt.show()
    else:
        print("No 'Date' column available to plot trends.")


# ---------------------------
# Part 4: Exception Handling
# ---------------------------

def convert_numeric_columns_to_int(df: pd.DataFrame):
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    print(f"Attempting to convert numeric columns to int: {numeric_cols}")
    for col in numeric_cols:
        try:
            df[col] = df[col].astype('Int64')  # pandas nullable integer
        except Exception as e:
            print(f"Error converting column '{col}' to int: {e}")


# ---------------------------
# Part 5: Advanced Data Structures
# ---------------------------

def country_deaths_dict(agg_df: pd.DataFrame) -> dict:
    d = dict(zip(agg_df['Country/Region'], agg_df['Deaths']))
    return d


# ---------------------------
# Part 6: File Export and Final Output
# ---------------------------

def save_processed(df: pd.DataFrame, filename: str = 'COVID19_Processed.csv') -> None:
    df.to_csv(filename, index=False)
    print(f"Processed data saved to {filename}")


def validate_saved_file(processed_df: pd.DataFrame, filename: str = 'COVID19_Processed.csv') -> bool:
    with open(filename, 'r', encoding='utf-8') as f:
        lines = [next(f).strip() for _ in range(5)]
    print("\nFirst 5 lines of saved file:")
    for l in lines:
        print(l)

    # Compare with processed_df head (string-wise)
    saved_head = pd.read_csv(filename).head()
    equal = saved_head.reset_index(drop=True).equals(processed_df.head().reset_index(drop=True))
    print(f"\nSaved file matches processed DataFrame head: {equal}")
    return equal


def main():
    # Load and validate
    df = load_and_validate(DATA_FILE)

    # Add active cases
    df = add_active_cases(df)

    # Countries over threshold
    countries = countries_over_threshold(df, threshold=1_000_000)
    print(f"\nCountries with total confirmed > 1,000,000: {countries}")

    # Add severity
    df = add_severity_column(df)

    # Aggregate and plot
    agg = aggregate_by_country(df)
    # Plotting - these will open figures when run in an interactive environment
    try:
        plot_top_countries(agg, top_n=10)
    except Exception as e:
        print(f"Plotting error (bar chart): {e}")

    try:
        plot_trends_for_country(df, country='India')
    except Exception as e:
        print(f"Plotting error (trends): {e}")

    # Exception handling for numeric conversion
    convert_numeric_columns_to_int(df)

    # Advanced structures
    deaths_dict = country_deaths_dict(agg)
    print(f"\nDeath counts dict sample (5 items): {dict(list(deaths_dict.items())[:5])}")
    us_deaths = deaths_dict.get('US') or deaths_dict.get('United States') or deaths_dict.get('United States of America')
    print(f"Deaths for United States (if present): {us_deaths}")

    # Tuple of columns
    columns_tuple = tuple(df.columns)
    print(f"\nColumns tuple contains 'Confirmed'? {'Confirmed' in columns_tuple}")

    # List comprehension for death rate > 5%
    # Avoid division by zero and NaN
    country_rates = agg.assign(death_rate = agg['Deaths'] / agg['Confirmed'])
    high_death_countries = [row['Country/Region'] for _, row in country_rates.iterrows() if pd.notna(row['death_rate']) and row['death_rate'] > 0.05]
    print(f"\nCountries with death rate > 5%: {high_death_countries}")

    # Save and validate
    save_processed(df, filename='COVID19_Processed.csv')
    validate_saved_file(df, filename='COVID19_Processed.csv')


if __name__ == '__main__':
    try:
        main()
    except FileNotFoundError as fe:
        print(str(fe))
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
