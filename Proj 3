# employee_system.py

import abc
import datetime

# Step 3: Abstraction using an Abstract Base Class
class BaseEmployee(abc.ABC):
    """Abstract base class for all employee types."""
    @abc.abstractmethod
    def get_details(self):
        """Returns a formatted string of employee details."""
        pass

    @abc.abstractmethod
    def calculate_bonus(self):
        """Calculates the annual bonus."""
        pass

# Step 1: Base Class for Employee
class Employee(BaseEmployee):
    """Represents a general employee."""
    def __init__(self, emp_id, name, age, department, salary, gender, joining_year, city, education, payment_tier, experience):
        self.emp_id = emp_id
        self.name = name
        self.age = age
        self.department = department
        # Step 3: Encapsulation for sensitive data
        self.__salary = salary
        self.gender = gender
        self.joining_year = joining_year
        self.city = city
        self.education = education
        self.payment_tier = payment_tier
        self.experience = experience

    # Getter for salary
    def get_salary(self):
        """Public method to access the private salary attribute."""
        return self.__salary

    def get_details(self):
        """Returns a detailed string representation of the employee."""
        return f"ID: {self.emp_id}, Name: {self.name}, Age: {self.age}, Dept: {self.department}, Salary: ${self.__salary}"

    def calculate_bonus(self):
        """Calculates a standard bonus (e.g., 10% of salary)."""
        return self.__salary * 0.10

    def length_of_service(self):
        """Calculates the employee's length of service in years."""
        current_year = datetime.datetime.now().year
        return current_year - self.joining_year

    def to_file_format(self):
        """Returns a CSV-formatted string for file storage."""
        return f"{self.emp_id},{self.name},{self.age},{self.department},{self.__salary},{self.gender},{self.joining_year},{self.city},{self.education},{self.payment_tier},{self.experience},Permanent"


# Step 2: Inheritance - Manager class
class Manager(Employee):
    """Represents a manager, who is also an employee."""
    def __init__(self, emp_id, name, age, department, salary, gender, joining_year, city, education, payment_tier, experience, team_size):
        super().__init__(emp_id, name, age, department, salary, gender, joining_year, city, education, payment_tier, experience)
        self.team_size = team_size

    # Overriding the get_details method
    def get_details(self):
        """Returns manager-specific details."""
        base_details = super().get_details()
        return f"{base_details}, Team Size: {self.team_size}"

    # Overriding the calculate_bonus method
    def calculate_bonus(self):
        """Managers get a higher bonus (e.g., 15% of salary + bonus per team member)."""
        base_bonus = self.get_salary() * 0.15
        team_bonus = self.team_size * 100
        return base_bonus + team_bonus

# Step 2: Inheritance & Polymorphism - ContractEmployee class
class ContractEmployee(Employee):
    """Represents a contract employee."""
    def __init__(self, emp_id, name, age, department, salary, gender, joining_year, city, education, payment_tier, experience, contract_duration_months):
        super().__init__(emp_id, name, age, department, salary, gender, joining_year, city, education, payment_tier, experience)
        self.contract_duration_months = contract_duration_months

    # Polymorphism: Overriding the get_details method
    def get_details(self):
        """Appends contract duration to the details."""
        base_details = super().get_details()
        return f"{base_details}, Contract Duration: {self.contract_duration_months} months"

    def calculate_bonus(self):
        """Contract employees typically do not receive a bonus."""
        return 0

    # Override for file format
    def to_file_format(self):
        """Returns a CSV-formatted string for file storage."""
        return f"{self.emp_id},{self.name},{self.age},{self.department},{self.get_salary()},{self.gender},{self.joining_year},{self.city},{self.education},{self.payment_tier},{self.experience},Contract"


# Step 4: Data Handling
class EmployeeSystem:
    def __init__(self, filename="employees.txt"):
        self.filename = filename
        self.employees = []

    def add_employee(self, employee):
        """Adds an employee to the system and saves to file."""
        self.employees.append(employee)
        self.save_to_file()

    def save_to_file(self):
        """Saves all employee data to the text file."""
        try:
            with open(self.filename, 'w') as f:
                # Write header
                f.write("ID,Name,Age,Department,Salary,Gender,JoiningYear,City,Education,PaymentTier,Experience,Type\n")
                for emp in self.employees:
                    f.write(emp.to_file_format() + '\n')
        except IOError as e:
            print(f"Error writing to file {self.filename}: {e}")

# Main execution block to create sample data
if __name__ == "__main__":
    system = EmployeeSystem()

    # Create sample employees to generate a dataset
    e1 = Employee(1, "Alice", 30, "Engineering", 90000, "Female", 2018, "New Delhi", "Bachelors", 2, 5)
    e2 = Manager(2, "Bob", 45, "Engineering", 150000, "Male", 2012, "Bangalore", "Masters", 1, 15, 10)
    e3 = ContractEmployee(3, "Charlie", 25, "HR", 50000, "Male", 2022, "New Delhi", "Bachelors", 3, 2, 12)
    e4 = Employee(4, "Diana", 35, "Marketing", 85000, "Female", 2016, "Pune", "Masters", 2, 8)
    e5 = Employee(5, "Eve", 28, "Sales", 75000, "Female", 2020, "Bangalore", "PHD", 3, 4)
    e6 = Manager(6, "Frank", 50, "Sales", 160000, "Male", 2010, "Pune", "Masters", 1, 20, 15)

    system.add_employee(e1)
    system.add_employee(e2)
    system.add_employee(e3)
    system.add_employee(e4)
    system.add_employee(e5)
    system.add_employee(e6)

    print("Employee data has been generated and saved to 'employees.txt'")
    print("\n--- Sample Employee Details ---")
    for emp in system.employees:
        print(emp.get_details())



/* Created a sample employee dataset with different types of employees (regular, managers, and contract employees)
Demonstrated OOP concepts:
Inheritance (Manager and ContractEmployee inherit from Employee)
Encapsulation (private salary attribute)
Polymorphism (overridden methods in derived classes)
Abstraction (BaseEmployee abstract class)
Generated a data file with employee records
The analysis script ran with some warnings (which are not errors, just deprecation notices from seaborn), and should have created visualizations showing:

Distribution of educational qualifications
Length of service across different cities
Correlation between payment tier and experience
Gender distribution in the workforce */
