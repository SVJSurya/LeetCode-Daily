import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import datetime

def analyze_employee_data(filename="employees.txt"):
    """Reads employee data and generates visualizations."""
    try:
        # Read the data using pandas
        df = pd.read_csv(filename)
    except FileNotFoundError:
        print(f"Error: The file '{filename}' was not found.")
        print("Please run 'python employee_system.py' first to generate the data.")
        return

    # Set plot style
    sns.set_style("whitegrid")
    plt.figure(figsize=(18, 12))

    # --- 1. Distribution of educational qualifications ---
    plt.subplot(2, 2, 1)
    sns.countplot(data=df, x='Education', palette='viridis', order=df['Education'].value_counts().index)
    plt.title('Distribution of Educational Qualifications')
    plt.xlabel('Education Level')
    plt.ylabel('Number of Employees')

    # --- 2. Length of service (Joining Year) vary across different cities ---
    current_year = datetime.datetime.now().year
    df['LengthOfService'] = current_year - df['JoiningYear']

    plt.subplot(2, 2, 2)
    sns.boxplot(data=df, x='City', y='LengthOfService', palette='plasma')
    plt.title('Length of Service Across Different Cities')
    plt.xlabel('City')
    plt.ylabel('Length of Service (Years)')

    # --- 3. Correlation between Payment Tier and Experience in Current Domain ---
    plt.subplot(2, 2, 3)
    sns.scatterplot(data=df, x='Experience', y='PaymentTier', hue='City', size='Salary', sizes=(50, 200), palette='magma')
    plt.title('Payment Tier vs. Experience')
    plt.xlabel('Experience (Years)')
    plt.ylabel('Payment Tier')
    plt.gca().get_yaxis().set_major_locator(plt.MaxNLocator(integer=True))

    # --- 4. Gender distribution within the workforce ---
    plt.subplot(2, 2, 4)
    gender_counts = df['Gender'].value_counts()
    plt.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', startangle=140, colors=sns.color_palette('pastel'))
    plt.title('Gender Distribution in the Workforce')
    plt.ylabel('') # Hide the y-label for pie charts

    # Adjust layout and display the plots
    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    analyze_employee_data()
